---
title: "bends"
editor: visual
---

## Trajectories that bend

- Thus far we have been sticking with monotonically increasing trajectories. This is a good assumption given the amount of data often found, along with the simplicity. 

- Often we want to see if trajectories are not straight. Development is not simple so our lines should not be. 

- Need effective strategies for line that bend that also balance tradeoffs with interprettability and overfitting


## Polynomial and Splines

Polynomials (quadratic)
level 1: 
$${Y}_{ij} = \beta_{0j}  + \beta_{1j}(Time_{ij} - \bar{X)} + \beta_{2j}(Time_{ij} - \bar{X)}^2 + \varepsilon_{ij}$$


Level 2: 
$${\beta}_{0j} = \gamma_{00} +   U_{0j}$$  
$${\beta}_{1j} = \gamma_{10} +  U_{1j}$$ 
$${\beta}_{2j} = \gamma_{20} +  U_{2j}$$ 



## MLM poly example


```{r}
library(readr)
cdrs <- read_csv("~/Box/5165 Applied Longitudinal Data Analysis/Longitudinal/cdrs.csv")

personality <- read_csv("~/Box/5165 Applied Longitudinal Data Analysis/Longitudinal/Subject_personality.csv")


library(ggplot2) 


gg1 <- ggplot(personality,
   aes(x = neodate, y = neuroticism, group = mapid)) + geom_line()  
gg1
```


---

```{r}

personality<- personality %>% 
  group_by(mapid) %>%
  arrange(neodate) %>% 
  dplyr::mutate(wave = seq_len(n())) 
```

```{r}
gg2 <- ggplot(personality,
   aes(x = wave, y = neuroticism, group = mapid)) + geom_line()  
gg2
```

---

```{r}
personality$neodate <- as.Date(personality$neodate, origin = "1900-01-01")

gg3 <- ggplot(personality,
   aes(x = neodate, y = neuroticism, group = mapid)) + geom_line()  
gg3

```


```{r, echo = FALSE}
## convert to days from first assessment

personality.wide <- personality %>% 
  dplyr::select(mapid, wave, neodate) %>% 
  spread(wave, neodate) 

personality.wide$wave_1 <- personality.wide$'1'
personality.wide$wave_2 <- personality.wide$'2'
personality.wide$wave_3 <- personality.wide$'3'
personality.wide$wave_4 <- personality.wide$'4'
personality.wide$wave_5 <- personality.wide$'5'

personality.wide <- personality.wide %>% 
mutate (w_1 = (wave_1 - wave_1)/365,
          w_2 = (wave_2 - wave_1)/365,
          w_3 = (wave_3 - wave_1)/365,
          w_4 = (wave_4 - wave_1)/365,
        w_5 = (wave_5 - wave_1)/365)

personality.long <- personality.wide %>% 
  dplyr::select(mapid, w_1:w_5) %>% 
  gather(wave, year, -mapid) %>% 
  separate(wave, c('weeks', 'wave' ), sep="_") %>% 
 dplyr::select(-weeks) 

personality.long$wave <-  as.numeric(personality.long$wave)


personality <- personality %>% 
   left_join(personality.long, by = c('mapid', 'wave' )) 




```


```{r}
personality.s <- personality %>% 
  group_by(mapid) %>% 
  tally() %>% 
   filter(n >=2) 

 personality <- personality %>% 
   filter(mapid %in% personality.s$mapid)

p2 <- lmer(neuroticism ~ year + (1 | mapid), data=personality)
```

---

quadratic 
```{r}
lmer(neuroticism ~ year + I(year^2) + (1 + year + I(year^2) | mapid), data=personality)
```


-------

```{r}
summary(quad)
```


------

#### The importance of centering  

- This is an interaction model, where you have a level 1 interaction. As such, centering is important to correctly interpret parameters.  

-------

graphicly, what does this look like? 

```{r}
library(modelr)
personality %>% 
  data_grid(year.c = seq(-4,10, 1), mapid ) %>% 
  add_predictions(p5) %>% 
   group_by(year.c) %>% 
  dplyr::summarize(pred = mean(pred)) %>% 
  ggplot(aes(x = year.c, y = pred)) +
  geom_line()

```


-------

compare with a linear model

```{r}
lin <- lmer(neuroticism ~ year +  (1 + year | id), data=personality)
```


```{r}
anova(quad, lin)
```


## SEM poly example

```{r, eval = FALSE}
model.6 <- '  i =~ 1*alcuse_14 + 1*alcuse_15 + 1*alcuse_16 
            s =~ 0*alcuse_14 + 1*alcuse_15 + 2*alcuse_16
            q =~ 0*alcuse_14 + 1*alcuse_15 + 4*alcuse_16  
'

fit.6 <- growth(model.6, data = alcohol.wide, missing = "ML")

```

---

```{r}
summary(fit.6)
```



---
## SEM latent basis

```{r}
model.6 <- '  i =~ 1*alcuse_14 + 1*alcuse_15 + 1*alcuse_16 
            s =~ 0*alcuse_14 + alcuse_15 + 1*alcuse_16
              
'

fit.6 <- growth(model.6, data = alcohol.wide, missing = "ML")

```

Does not change the fit of the model nor the implied means, but it can change your parameters by changing the time scaling. 



## Piecewise

- Fit more than 1 trajectory

- Best to use when we have a reason for a qualitative difference at a time point. For example, before your health event you may have a different trajectory than after

- Time modeled as dummy variables that represent different segments

- The point of separation is called a knot. You can have as many as you want and these can be pre-specified or let the data specify   

------

#### two-rate specification 
- The easiest example is to take your time variable and transform it into a Time1 and time2, that represent the different time periods 


```{r}
t1 <- tribble(
  ~time, ~t0, ~t1,~t2,~t3,~t4,~t5,
  "time 1", 0, 1,2,2,2,2,
  "time 2", 0, 0,0,1,2,3
)
t1
```


- Once you hit the knot your value stays the same. For the second curve, until you get to knot you don't have a trajectory. 

------

#### incremental curves

- Here the first trajectory keeps going, whereas the second trajectory starts at the position of the knot. 

```{r}
t2 <- tribble(
  ~time, ~t0, ~t1,~t2,~t3,~t4,~t5,
  "time 1", 0, 1,2,3,4,5,
  "time 2", 0, 0,0,1,2,3
)
t2
```

- The two coding schemes propose the same type of trajectory, the difference is in interpretation. 
- In the first, the two slope coefficients represent the actual slope in the respective time period. 
- In the second, the coefficient for time 2 represents the deviation from the slope in period 1. 


--------
##### mlm example

level 1: 

$${Y}_{ij} = \beta_{0j}  + \beta_{1j}Time1_{ij} + \beta_{2j}Time2_{ij} + \varepsilon_{ij}$$


Level 2: 
$${\beta}_{0j} = \gamma_{00} +  U_{0j}$$  

$${\beta}_{1j} = \gamma_{10} +  U_{1j}$$ 
$${\beta}_{2j} = \gamma_{20} +  U_{2j}$$ 


---

0 1 2 2 2   
0 0 0 1 2

```{r}

personality$time1 <- recode(personality$wave, '1' = 0 , '2' = 1,  '3' = 2, '4' = 2,'5' = 2)      
personality$time2 <- recode(personality$wave, '1' = 0 , '2' = 0,  '3' = 0, '4' = 1,'5' = 2) 


```


---

```{r}
p7 <- lmer(neuroticism ~ time1 + time2 + (time1 + time2  | mapid) , data=personality)
summary(p7)
```


---

```{r}
p8 <- lmer(neuroticism ~ time1 + time2 + (time1 + time2   | mapid) , data=personality)
summary(p8)
```


--------
##### Sem example


---
## splines + polynomial = polynomial piecewise


$${Y}_{ij} = \beta_{0j}  + \beta_{1j}Time1_{ij} +  \beta_{2j}Time1_{ij}^2 + \beta_{3j}Time2_{ij} + \varepsilon_{ij}$$

Level 2: 
$${\beta}_{0j} = \gamma_{00} +  U_{0j}$$  

$${\beta}_{1j} = \gamma_{10} +  U_{1j}$$ 
$${\beta}_{2j} = \gamma_{20} +  U_{2j}$$
$${\beta}_{3j} = \gamma_{30} +  U_{3j}$$ 








